import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion 30
    flavorDimensions 'server'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        debug {
            versionNameSuffix getCurrentVersionSuffix()
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            versionNameSuffix getCurrentVersionSuffix()
        }
    }

    productFlavors {
        prod {
            applicationId "com.pcsalt.example.productflavors"
            dimension 'server'
        }
        uat {
            applicationId "com.pcsalt.example.productflavors.uat"
            dimension 'server'
        }
        dev {
            applicationId "com.pcsalt.example.productflavors.dev"
            dimension 'server'
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.2.0'
}

def getCurrentVersionSuffix() {
    def currentFlavor = getCurrentFlavor()
    if (currentFlavor.equals("prod")) {
        return "-prod"
    } else if (currentFlavor.equals("uat")) {
        return "-uat"
    } else if (currentFlavor.equals("dev")) {
        return "-dev"
    }
}

def getCurrentFlavor() {
    String taskRequestName = getGradle().getStartParameter().getTaskRequests().toString()

    Pattern pattern

    if (taskRequestName.contains("assemble"))
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher(taskRequestName)

    if (matcher.find()) {
        return matcher.group(1).toLowerCase()
    } else {
        return ""
    }
}